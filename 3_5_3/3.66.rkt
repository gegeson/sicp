#lang racket/load
(require sicp)
(require (prefix-in strm: racket/stream))
(require "3_5_3/stream.rkt")
; 13:56->15:07
(define (interleave s1 s2)
  (if (stream-null? s1)
      s2
      (cons-stream (stream-car s1)
                   (interleave s2 (stream-cdr s1)))))

(define (pairs s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (interleave
    (stream-map (lambda (x) (list (stream-car s) x))
                (stream-cdr t))
    (pairs (stream-cdr s) (stream-cdr t)))))

(define (stream-head s n)
 (define (iter s n)
   (if (<= n 0)
     'done
     (begin
       (display (stream-car s))
       (newline)
       (iter (stream-cdr s) (- n 1)))))
 (iter s n))

(stream-head (pairs integers integers) 10)

日本語解説が長いので検証パートを分けることにした。
3.66.検証.rktへ

この結果を見てみる（括弧の3つめの要素は出てきた順番）とこういうことがわかった。

(S0, T0)　を領域A,

(S0, T1), (S0, T2), …　を領域B

(S1, T1), (S1, T2),…
          (S2, T2),…
                   …  を領域Cとすると

ペアの登場は領域Aから始まり、
次は領域Bの先頭、そして領域Bと領域Cが一つおきに交互に呼ばれる。
領域Cでの呼ばれ方は、領域Cを領域A, B, Cのように区切った時と同じ
ということがわかった。定義通りで当たり前なんだけど。
そして、
(1, 100)は領域Bに登場し、
領域Aが呼ばれた後領域Cと交互に呼ばれるゾーンに位置している。
領域Cの要素がいつ呼ばれるかは、こう計算できる。
(1, n)なら、　2 * (n - 1)
よって
(1, 100)は　2 * (100-1) = 198番目、

つまりここまでに197個ペアが出て来る。

-----------
考えながら書いたので結構雑っす

領域A, B, Cをそれぞれ領域A1, B1, C1と呼びなおすことにする。

また、領域C1によって新たに作られる3つの領域の事を、
領域A2, 領域B2、領域C2 と呼ぶことにする。

領域C1内では、まず領域A2が呼ばれる。その後一旦領域B1に戻り、
間に領域B1の呼び出しを挟みながら領域B2と領域C2の呼び出しを繰り返す。
そのため、間に2つずつ領域B1の呼び出しが割り込むから、
領域B2は4つ飛ばしで呼ばれることになる。
これは一般化可能であり、
領域Bnは2^n飛ばしで呼ばれる。

今気付いたこと。
領域Cn内では、
2^(n-1)飛ばしで
領域An→領域Bnの一つ目→領域Cnの一つ目
の順に進む。
そして、初めて領域Cnを呼び出したときがすなわち領域A(n+1)の呼び出しである。
そして、2^(n-1)飛ばしで
領域An→領域Bn→領域Cnが呼ばれる、ということは、
An + 2^(n-1) + 2^(n-1) = A(n+1)ということ。
A(n+1) = 2^n + An
と言い換えてもいい。
これは
A1 = 1,
A2 = 1 + 2^1 = 3,
A3 = 3 + 2^2 = 7
A4 = 7 + 2^3 = 15
を見てもわかること。

おお、めっちゃ進展したぞ。

この数列は一般化可能である
単純に漸化式を解いて、
An = 1 + 2 + … + 2^(n-1)
An = 2^n - 1
結果を見ても明らか。

(99, 100)と(100, 100)の間に幾つペアが在るか、を調べるには
それぞれが何番目か、を知れば良い。

まず、(99, 99)は A99
つまり 2^99 - 1
そして、(99, 100)は 領域B99 の最初のペアであり、
2^(99-1 )飛ばしで A99 から B99 が呼び出されるから、
(99, 100) は
(2^99 - 1 + 2^(99-1)) 番目の数
(100, 100)は A100 であるから、(2^100 - 1)番目の数
したがって、
(99, 100)と(100, 100)の間には、
(2^100 - 1) - (2^99 - 1 + 2^(99-1))
だけ整数がある。

これで合ってるはずだけど、
一応　(9, 10)と(10, 10)で同じ計算が使えるかを確かめておこう

→同じ計算が使えたので合ってるっぽい！！！！！！！！！！！！！！
