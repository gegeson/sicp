#lang racket
(require racket/trace)
;9:45 -> 9:54
(define (sum term a next b)
  (if (> a b)
    0
    (+ (term a)
       (sum term (next a) next b))
    )
  )
(define (even? n)
    (= (remainder n 2) 0)
  )
(define (product term a next b)
    (if (> a b)
      1
      (* (term a)
         (product term (next a) next b))))
(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a) (accumulate combiner null-value term (next a) next b))
))

(define (accumulate2 combiner null-value term a next b)
    (define (accumulate2-iter result a)
      (if (> a b)
        result
        (accumulate2-iter (combiner (term a) result) (next a)))
      )
      (accumulate2-iter null-value a)
  )

(define (product2 term a next b)
  (accumulate * 1 term a next b)
)
(define (product3 term a next b)
  (accumulate2 * 1 term a next b)
)

(define (de k)
  (if (even? k)
      (+ k 3)
      (+ k 2)))
(define (nu k)
  (if (even? k)
      (- (de k) 1)
      (+ (de k) 1)
  ))
(define (k-ary k)
  (/ (nu k) (de k))
)
(define (inc x)
  (+ x 1))
(define (pi n)
  (* 4.0 (product2 k-ary 0 inc n))
  )
  (define (pi3 n)
    (* 4.0 (product3 k-ary 0 inc n))
    )
;(accumulate combiner null-value term a next b)
(define (pi-sum a b)
  (define (pi-term x)
    (/ 1.0 (* x (+ x 2))))
  (define (pi-next x)
    (+ x 4))
(* 8 (accumulate + 0 pi-term a pi-next b)))
(define (pi-sum2 a b)
  (define (pi-term x)
    (/ 1.0 (* x (+ x 2))))
  (define (pi-next x)
    (+ x 4))
(* 8 (accumulate2 + 0 pi-term a pi-next b)))
(display (pi-sum 1 1000))
(newline)
(display (pi-sum2 1 1000))
(newline)
  ;(display (pi 10))
  ;(newline)
  ;(display (pi 100))
  ;(newline)
  ;(display (pi 1000))
  ;(newline)
  ;(display (pi3 10))
  ;(newline)
  ;(display (pi3 100))
  ;(newline)
  ;(display (pi3 1000))
