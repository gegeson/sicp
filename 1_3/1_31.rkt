#lang racket
(require racket/trace)
; 9:23 -> 9:38
(define (sum term a next b)
  (if (> a b)
    0
    (+ (term a)
       (sum term (next a) next b))
    )
  )
(define (even? n)
    (= (remainder n 2) 0)
  )
(define (product term a next b)
    (if (> a b)
      1
      (* (term a)
         (product term (next a) next b)))
  )
(define (product2 term a next b)
    (define (product2-iter a result)
        (if (> a b)
            result
          (product2-iter (next a) (* (term a) result))
          )
      )
  (trace product2-iter)
      (product2-iter a 1)
  )
(define (de k)
  (if (even? k)
      (+ k 3)
      (+ k 2)))
(define (nu k)
  (if (even? k)
      (- (de k) 1)
      (+ (de k) 1)
  ))
(define (k-ary k)
  (/ (nu k) (de k))
)
(define (inc x)
  (+ x 1))
(define (pi n)
  (* 4.0 (product k-ary 0 inc n))
  )
  (define (pi2 n)
    (* 4.0 (product2 k-ary 0 inc n))
    )
(trace product)
(display (pi 10))
(newline)
(display (pi2 10))
;(display (k-ary 0))
;(newline)
;(display (k-ary 1))
;(newline)
;(display (k-ary 2))
;(newline)
;(display (k-ary 3))
;(newline)
;(display (k-ary 4))
;(newline)
