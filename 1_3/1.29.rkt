#lang racket
(require racket/trace)
;22:15->22:40
;5 8:45->8:54
(define (sum term a next b)
  (if (> a b)
    0
    (+ (term a)
       (sum term (next a) next b))
    )
  )
(define (h a b n)
    (/ (- b a) n)
  )
(define (even? n)
    (= (remainder n 2) 0)
  )
(define (cube x)
  (* x x x))
(define (simpson f a b n)
    (/ (* (h a b n) (simpson_ f a b 0 n)) 3)
  )
(define (simpson_ f a b k n)
    (if (> k n)
      0
      (+ (* (co k n) (f (+ a (* k (h a b n))))) (simpson_ f a b (+ k 1) n)))
  )
(define (simpson2 f a b k n)
  (define (term_ k)
    (* (co k n) (f (+ a (* k (h a b n))))))
  (define (next k)
    (+ k 1))
    (define (simpson2-iter f term k next n)
      (sum term k next n)
      )
      (/ (* (h a b n) (simpson2-iter f term_ 0 next n)) 3)
  )
  (define (co k n)
    (cond
        ((= k 0) 1)
        ((= k n) 1)
        ((even? k) 2)
        (else
          4
        )
      )
    )
;(display (h 0 1 ))
;(newline)
;(display (co 1 10))
;(newline)
;(display (co 2 10))
;(newline)
;(trace simpson_)
(display (simpson cube 0 1 10))
(newline)
(display (simpson cube 0 2 100))
(newline)
(display (simpson2 cube 0 1 0 10))
(newline)
(display (simpson2 cube 0 2 0 100))
