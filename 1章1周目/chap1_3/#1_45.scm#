(define (square x) (* x x))
(define (cube x) (* x x x))
(define (average a b) (/ (+ a b) 2))

(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance
       )
    )
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))
      )
    )
  (try first-guess)
  )

(define (average-damp f)
  (lambda (x) (average x (f x)))
  )

(define dx 0.00001)

(define (compose f g)
  (lambda (x) (f (g x)))
  )
(define (repeated f n)
  (define (iter n)
    (if (= n 1)
        (lambda (a) (f a))
        (compose f (iter (- n 1))))
    )
  (iter n)
  )


(define (nth-power a n)
  (cond
   ((= n 0) 1)
   (else
    (* a (nth-power a (- n 1))))
  ))

(define (sqrt x)
  (fixed-point (average-damp (lambda (y) (/ x y)))
               1.0)
  )

(define (cube-root x)
  (fixed-point (average-damp (lambda (y) (/ x (square y))))
               1.0)
  )
(define (*4th-root x)
  (fixed-point ((repeated average-damp 2) (lambda (y) (/ x (cube y))))
               1.0)
  )
(define (nth-root x n)
  (fixed-point ((repeated average-damp (- n 1))
                          (lambda (y) (/ x (nth-power y (- n 1))))) 1.0))


(print (sqrt 2.0))
(print (cube-root 2.0))
(print (*4th-root 2.0))
;;(print (nth-root 2.0 1))
;;(print (nth-root 2.0 2))
(print (nth-root 2.0 3))
(print (nth-root 2.0 4))
(print (nth-root 2.0 5))
(print (nth-root 2.0 6))
(print (nth-root 2.0 7))
