(define (square x) (* x x))
(define (cube x) (* x x x))
(define (average a b) (/ (+ a b) 2))

(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance
       )
    )
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))
      )
    )
  (try first-guess)
  )

(define (average-damp f)
  (lambda (x) (average x (f x)))
  )

(define dx 0.00001)

(define (compose f g)
  (lambda (x) (f (g x)))
  )
(define (repeated f n)
  (define (iter n)
    (if (= n 1)
        (lambda (a) (f a))
        (compose f (iter (- n 1))))
    )
  (iter n)
  )


(define (nth-power a n)
  (cond
   ((= n 0) 1)
   (else
    (* a (nth-power a (- n 1))))
  ))

(define (sqrt x)
  (fixed-point (average-damp (lambda (y) (/ x y)))
               1.0)
  )

(define (cube-root x)
  (fixed-point (average-damp (lambda (y) (/ x (square y))))
               1.0)
  )
(define (*4th-root x)
  (fixed-point ((repeated average-damp 2) (lambda (y) (/ x (cube y))))
               1.0)
  )
(define (nth-root x n)
  (print n)
  (fixed-point ((repeated average-damp (av-dump-num n))
                          (lambda (y) (/ x (nth-power y (- n 1))))) 1.0))

(define (av-dump-num n)
  (define (iter m)
    (if (< n (nth-power 2 m))
        (- m 1)
        (iter (+ m 1))
        )
    )
  (iter 1)
  )

(define (nth-root-wrap x n)
  (if (= n 1)
      x
      (nth-root x n))
  )

(print (nth-root-wrap 2.0 1))
(print (nth-root-wrap 2.0 2))
(print (nth-root-wrap 2.0 3))
(print (nth-root-wrap 2.0 4))
(print (nth-root-wrap 2.0 5))
(print (nth-root-wrap 2.0 6))
(print (nth-root-wrap 2.0 7))
(print (nth-root-wrap 2.0 8))
(print (nth-root-wrap 2.0 9))
(print (nth-root-wrap 2.0 10))
(print (nth-root-wrap 2.0 11))
(print (nth-root-wrap 2.0 12))
(print (nth-root-wrap 2.0 13))
(print (nth-root-wrap 2.0 14))
(print (nth-root-wrap 2.0 15))
(print (nth-root-wrap 2.0 16))
(print (nth-root-wrap 2.0 17))
(print (nth-root-wrap 2.0 18))
(print (nth-root-wrap 2.0 19))
(print (nth-root-wrap 2.0 20))
(print (nth-root-wrap 2.0 21))
(print (nth-root-wrap 2.0 22))
(print (nth-root-wrap 2.0 23))
(print (nth-root-wrap 2.0 24))
(print (nth-root-wrap 2.0 25))
(print (nth-root-wrap 2.0 26))
(print (nth-root-wrap 2.0 27))
(print (nth-root-wrap 2.0 28))
(print (nth-root-wrap 2.0 29))
(print (nth-root-wrap 2.0 30))
(print (nth-root-wrap 2.0 31))
(print (nth-root-wrap 2.0 32))
(print (nth-root-wrap 2.0 33))
(print (nth-root-wrap 2.0 131))
(print (nth-root-wrap 2.0 122))
(print (nth-root-wrap 2.0 1093))

(print (nth-root-wrap 4.89 1))
(print (nth-root-wrap 4.89 2))
(print (nth-root-wrap 4.89 3))
(print (nth-root-wrap 4.89 4))
(print (nth-root-wrap 4.89 5))
(print (nth-root-wrap 4.89 6))
(print (nth-root-wrap 4.89 7))
(print (nth-root-wrap 4.89 8))
(print (nth-root-wrap 4.89 9))
(print (nth-root-wrap 4.89 10))
(print (nth-root-wrap 4.89 11))
(print (nth-root-wrap 4.89 12))
(print (nth-root-wrap 4.89 13))
(print (nth-root-wrap 4.89 14))
(print (nth-root-wrap 4.89 15))
(print (nth-root-wrap 4.89 16))
(print (nth-root-wrap 4.89 17))
(print (nth-root-wrap 4.89 18))
(print (nth-root-wrap 4.89 19))
(print (nth-root-wrap 4.89 20))
(print (nth-root-wrap 4.89 21))
(print (nth-root-wrap 4.89 22))
(print (nth-root-wrap 4.89 23))
(print (nth-root-wrap 4.89 24))
(print (nth-root-wrap 4.89 25))
(print (nth-root-wrap 4.89 26))
(print (nth-root-wrap 4.89 27))
(print (nth-root-wrap 4.89 28))
(print (nth-root-wrap 4.89 29))
(print (nth-root-wrap 4.89 30))
(print (nth-root-wrap 4.89 31))
(print (nth-root-wrap 4.89 32))
(print (nth-root-wrap 4.89 33))
(print (nth-root-wrap 4.89 131))
(print (nth-root-wrap 4.89 122))
(print (nth-root-wrap 4.89 1093))
(print (av-dump-num 16))
(print (av-dump-num 33))
