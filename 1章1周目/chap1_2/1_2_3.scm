(define (expt b n)
  (if (= n 0)
      1
      (* b (expt b (- n 1)))
      )
  )
(define (expt b n)
  (expt-iter b n 1)
  )
(define (expt-iter b counter product)
  (if (= counter 0)
      product
      (expt-iter b
                 (- counter 1)
                 (* b product)
                 )
      )
  )

(define (even? n)
  (= (remainder n 2) 0)
  )
(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))
  )
)
;;aの初期値は1
(define (fast-expt2 a b n)
  (cond ((= n 0) a)
        ((even? n) (fast-expt2 a (* b b) (/ n 2)))
        (else (fast-expt2 (* a b) b (- n 1)))
        )
  )
(define (expt2 b n)
  (fast-expt2 1 b n)
  )
(print (fast-expt 2 5))
(print (expt2 2 5))
(print (fast-expt 2 11))
(print (expt2 2 11))
(print (fast-expt 3 1))
(print (expt2 3 1))
(print (fast-expt 3 2))
(print (expt2 3 2))
(print (fast-expt 3 3))
(print (expt2 3 3))
(print (fast-expt 3 19))
(print (expt2 3 19))
(print (fast-expt 3 31))
(print (expt2 3 31))
(print (fast-expt 7 1211))
(print (expt2 7 1211))
