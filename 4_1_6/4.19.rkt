20:17->20:25
#lang racket

(let ((a 1))
  (define (f x)
    (define b (+ a x))
    (define a 5)
    (+ a b))
  (f 10))

Racketくんは
>a: undefined;
を返すそうです。
つまり、Alyssa派か。
自分としては、真の同時定義であるEva派。
Eva派の実装法は、遅延評価以外にないと思う。
bの(+ a x)の評価を、(+ a b)の計算まで遅延する。
具体的なやり方は言語に組み込むしかないかと。

脚注を読めときのこる庭に書いてあったので、読んでみる
「Scheme の実装者たちは、次のような理由から Alyssa を支持しています。
まず、 Eva は原理上は正しいことになります。定義は同時だと見なされるべきだからです。
しかし、Eva が求めることを行う一般的で効率的な仕組みを実装するのは難しいようです。
そのような仕組みが作れない以上は、
同時定義の難しいケースではエラーを発生させる (Alyssa の考え) ほうが、
正しくない答えを出す (Ben のやり方) よりもよいということです。」

なるほど。これでようやく、 *unassigned* で初期化することの意味がはっきりと理解できたぞ。
間違った答えを出しうるぐらいならエラーを発生させてしまえばいい、ということだったのか。
そしてEvaは正しいが理想論と。なるほどなるほど。
