20:55->20:58
21:00->21:05
21:07->21:13

こちらも方針だけ考えてた時間はノーカン

環境図はいつもどおりパス

フレームが一つ余分にあるのは、関数の適用の時にフレームを増やすから。
具体的には、仮引数と実引数のペアからなるフレームを環境に付け足す。
この違いが正しいプログラムの振る舞いに影響を及ぼさないのは、
今のフレームにない変数は一つ外側のフレームを探しに行くという処理をするだけだが、
この場合外側のフレームは必ず「仮引数と実引数のペア」になるし、
内側で定義されてるものは全部吐き出されるから、内側では見つからず、外側に行くだけ。

インタプリタに余分なフレームを構築せずに同じことをやる方法。
めっちゃ単純な話。今あるフレームに追加すりゃあ良いだけ。

これを
(lambda ⟨vars⟩
  (let ((u '*unassigned*)
        (v '*unassigned*))
    (set! u ⟨e1⟩)
    (set! v ⟨e2⟩)
  ⟨e3⟩))

こうじゃ
(lambda ⟨vars⟩
  (define u '*unassigned*)
  (define v '*unassigned*)
    (set! u ⟨e1⟩)
    (set! v ⟨e2⟩)
  ⟨e3⟩)
