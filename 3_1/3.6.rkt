#lang debug racket
(require sicp)
(require racket/trace)
;多分25mぐらい
(define (rand-update x)
  (let ((a 27) (b 26) (m 127))
    (modulo (+ (* a x) b) m)))
;自分で書いたもの
(define (rand)
  (let ((x 7))
  (lambda (s)
            (cond
              ((eq? s 'reset)
               (lambda (value)
                       (begin (set! x (rand-update value)) x)))
               ((eq? s 'generate)
                (begin (set! x (rand-update x)) x))
               (else (error "Undefined message" s))
               )
            ))
  )

;以下はこちらを参考にしたもの。
;http://uents.hatenablog.com/entry/sicp/027-ch3.1.md
;一応自分も最初このような方針で書こうとしてたが、なんか上手く行かなかった。
;よく考えたらこっちは括弧をひとつ余計に囲わないといけないのが動かなかった原因だったらしい。
(define rand2
  (let ((x 7))
    (define (reset)
      (lambda (value)
              (begin (set! x (rand-update value)) x))
      )
    (define (generate)
      (begin (set! x (rand-update x)) x))
    (define (dispatch s)
      (cond
        ((eq? s 'reset) reset)
        ((eq? s 'generate) generate)
        (else (error "あかん" s)))
      )
    dispatch)
  )
(define a rand2)
(display ((a 'generate)))
(newline)
(display ((a 'generate)))
(newline)
(display ((a 'generate)))
(newline)
(display "ここでリセット")
(newline)
(display (((a 'reset)) 7))
(newline)
(display ((a 'generate)))
(newline)
(display ((a 'generate)))
(newline)
(display ((a 'generate)))
(newline)
(display "ここでリセット")
(newline)
(display (((a 'reset)) 7))
(newline)
(display ((a 'generate)))
(newline)
(display ((a 'generate)))
(newline)
(display ((a 'generate)))
(newline)
