#lang debug racket
(require sicp)
(require racket/trace)
;17:54->18:24
(define (rand-update x)
  (let ((a 27) (b 26) (m 127))
    (modulo (+ (* a x) b) m)))
(define random-init 7)
(define rand (let ((x random-init))
               (lambda ()
                       (set! x (rand-update x))
                       x)))
(define (estimate-pi trials)
  (sqrt (/ 6 (monte-carlo trials cesaro-test))))

(define (cesaro-test)
  (= (gcd (rand) (rand)) 1))

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
      ((experiment)
       (iter (- trials-remaining 1)
             (+ trials-passed 1)))
      (else
       (iter (- trials-remaining 1)
             trials-passed)
       )
      )
    )
  (iter trials 0)
  )
(display (monte-carlo 10000 (lambda () (= 0 (remainder (rand) 2))) ))
(newline)
(display (monte-carlo 10000 (lambda () (= 0 (remainder (rand) 2))) ))
(newline)
(display (monte-carlo 10000 (lambda () (= 0 (remainder (rand) 2))) ))
(newline)
(display (monte-carlo 10000 (lambda () (= 0 (remainder (rand) 2))) ))
(newline)
(display (monte-carlo 10000 (lambda () (= 0 (remainder (rand) 2))) ))
