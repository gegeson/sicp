#lang racket
(require sicp)
(require racket/trace)
(define (square x) (* x x))
;; prime?

(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (prime? n)
  (= n (smallest-divisor n)))

(define (timed-prime-test n)
    (newline)
    (display n)
    (start-prime-test n (runtime))
  )
(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))
    )
  )
(define (report-prime elapsed-time)
  (display "***")
  (display elapsed-time))

(define (search-for-primes-iter start end)
  (cond ((> start end))
    ((timed-prime-test start)
        (search-for-primes-iter (+ 2 start) end))
    (else
     (search-for-primes-iter (+ 2 start) end)
     )
    )
  )
(define (search-for-primes start end)
    (if (even? start)
        (search-for-primes-iter (+ start 1) end)
        (search-for-primes-iter start end)
      )
  )
;(trace search-for-primes-iter)
(search-for-primes 1000 1050)
(search-for-primes 10000 10050)
(search-for-primes 100000 100050)
;(search-for-primes 1 10)

  ;(define (search-for-primes n)
  ;  (define (search-for-primes-iter i k)
  ;    (cond ((=  k 3))
  ;          ((prime? i)
  ;           (display i) (newline)
  ;           (search-for-primes-iter (+ i 2) (+ k 1)))
  ;          (else (search-for-primes-iter (+ i 2) k))))
  ;  (if (even? n)
  ;    (search-for-primes-iter (+ n 1) 0)
  ;  (search-for-primes-iter n 0)))

;(search-for-primes 14)
;
;(search-for-primes-iter 3 10)
