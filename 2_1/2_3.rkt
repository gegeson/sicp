#lang racket
(require racket/trace)
;12:26->12:58

(define (make-point x y)
  (cons x y))
(define (x-point point)
  (car point))
(define (y-point point)
  (cdr point))

(define (make-segment x1 y1 x2 y2)
    (cons (make-point x1 y1) (make-point x2 y2))
  )
(define (start-segment segment)
  (car segment)
  )
(define (end-segment segment)
  (cdr segment)
)
(define (midpoint-segment segment)
  (let ((x1 (x-point (start-segment segment)))
        (y1 (y-point (start-segment segment)))
        (x2 (x-point (end-segment segment)))
        (y2 (y-point (end-segment segment))))
  (make-point (/ (+ x1 x2) 2) (/ (+ y1 y2) 2))
  ))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

;(print-point (midpoint-segment (make-segment 1 1 0 0)))
;(print-point (midpoint-segment (make-segment 7 6 3 2)))
(define (make-vector segment)
(let ((x1 (x-point (start-segment segment)))
      (y1 (y-point (start-segment segment)))
      (x2 (x-point (end-segment segment)))
      (y2 (y-point (end-segment segment))))
  (cons (- x2 x1) (- y2 y1))
  ))
(define (is_cross? v1 v2)
(let ((x1 (x-point v1))
      (y1 (y-point v1))
      (x2 (x-point v2))
      (y2 (y-point v2)))
    (= (+ (* x1 x2) (* y1 y2)) 0)
  )
)

(define (square x) (* x x))

(define (distance p1 p2)
    (let ((x1 (x-point p1))
          (y1 (y-point p1))
          (x2 (x-point p2))
          (y2 (y-point p2)))
      (sqrt (+ (square (- x2 x1)) (square (- y2 y1))))
      )
  )

(print-point (make-vector (make-segment 7 6 3 2)))
(newline)
(display (distance (make-point 1 1) (make-point 0 0)))
(newline)
(define v1 (make-vector (make-segment 0 0 0 1)))
(define v2 (make-vector (make-segment 0 0 1 0)))
(display v1)
(newline)
(display v2)
(newline)
(display (is_cross? v1 v2))
