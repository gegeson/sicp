#lang racket
(require racket/trace)
;12:26->12:58
;14:01->14:20
;14:22->14:32
(define (make-point x y)
  (cons x y))
(define (x-point point)
  (car point))
(define (y-point point)
  (cdr point))

(define (make-segment x1 y1 x2 y2)
    (cons (make-point x1 y1) (make-point x2 y2))
  )
(define (start-segment segment)
  (car segment)
  )
(define (end-segment segment)
  (cdr segment)
)
(define (midpoint-segment segment)
  (let ((x1 (x-point (start-segment segment)))
        (y1 (y-point (start-segment segment)))
        (x2 (x-point (end-segment segment)))
        (y2 (y-point (end-segment segment))))
  (make-point (/ (+ x1 x2) 2) (/ (+ y1 y2) 2))
  ))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

(print-point (midpoint-segment (make-segment 1 1 0 0)))
(print-point (midpoint-segment (make-segment 7 6 3 2)))

(define (square x) (* x x))

(define (distance p1 p2)
    (let ((x1 (x-point p1))
          (y1 (y-point p1))
          (x2 (x-point p2))
          (y2 (y-point p2)))
      (sqrt (+ (square (- x2 x1)) (square (- y2 y1))))
      )
  )

;(define (make-rectangle1 p1 p2)
;(let ((x1 (x-point p1))
;      (y1 (y-point p1))
;      (x2 (x-point p2))
;      (y2 (y-point p2)))
;  (let ((s1 (make-segment x1 y1 x2 y1))
;        (s2 (make-segment x2 y1 x2 y2))
;        (s3 (make-segment x2 y2 x1 y2))
;        (s4 (make-segment x1 y2 x1 y1))
;        )
;
;    )
;))
;長方形の対角の2点p1, p2を指定する
(define (make-rectangle1 p1 p2)
  (cons p1 p2))
;長方形の一点がp、whが幅と高さ
(define (make-rectangle2 p wh)
  (let ((w (car wh))
        (h (cdr wh))
        (x (x-point p))
        (y (y-point p)))
    (cons p (cons (+ x w) (+ y h)))
    )
  )
(define (ret-width rectangle)
  (let ((x1 (x-point (car rectangle)))
        (x2 (x-point (cdr rectangle))))
    (abs (- x2 x1))))
(define (ret-height rectangle)
(let ((y1 (y-point (car rectangle)))
      (y2 (y-point (cdr rectangle))))
    (abs (- y2 y1))
  )
)
(define (ret-len rectangle)
(let ((x1 (x-point (car rectangle)))
      (y1 (y-point (car rectangle)))
      (x2 (x-point (cdr rectangle)))
      (y2 (y-point (cdr rectangle))))
  (+ (* 2 (abs (- x2 x1))) (* 2 (abs (- y2 y1))))
  )
)
(define (make-wh w h)
  (cons w h))
(define (ret-area rectangle)
  (* (ret-width rectangle) (ret-height rectangle))
  )
(define point2 (make-point 1 2))
(define point1 (make-point 2 3))
(define wh1 (make-wh 1 1))
(define r1 (make-rectangle1 point1 point2))
(define r2 (make-rectangle2 point1 wh1))
(newline)
(display (ret-len r1))
(newline)
(display (ret-len r2))
(newline)
(display (ret-area r1))
(newline)
(display (ret-area r2))
(define point4 (make-point 5 7))
(define point3 (make-point 12 29))
(define wh2 (make-wh 7 22))
(define r3 (make-rectangle1 point3 point4))
(define r4 (make-rectangle2 point3 wh2))
(newline)
(display (ret-len r3))
(newline)
(display (ret-len r4))
(newline)
(display (ret-area r3))
(newline)
(display (ret-area r4))
