#lang racket
(require racket/trace)

(define (make-point x y)
  (cons x y))
(define (x-point point)
  (car point))
(define (y-point point)
  (cdr point))

(define (make-segment x1 y1 x2 y2)
    (cons (make-point x1 y1) (make-point x2 y2))
  )
(define (start-segment segment)
  (car segment)
  )
(define (end-segment segment)
  (cdr segment)
)
(define (midpoint-segment segment)
  (let ((x1 (x-point (start-segment segment)))
        (y1 (y-point (start-segment segment)))
        (x2 (x-point (end-segment segment)))
        (y2 (y-point (end-segment segment))))
  (make-point (/ (+ x1 x2) 2) (/ (+ y1 y2) 2))
  ))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

(print-point (midpoint-segment (make-segment 1 1 0 0)))
(print-point (midpoint-segment (make-segment 7 6 3 2)))
