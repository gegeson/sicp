#lang racket
(require sicp)
;16:55->
(define (make-vect x y) (cons x y))
(define (xcor-vect v) (car v))
(define (ycor-vect v) (cdr v))

(define (add-vect v1 v2)
  (let ((v1_x (xcor-vect v1))
        (v1_y (ycor-vect v1))
        (v2_x (xcor-vect v2))
        (v2_y (ycor-vect v2)))
      (make-vect (+ v1_x v2_x) (+ v1_y v2_y))
    )
  )
(define (sub-vect v1 v2)
  (let ((v1_x (xcor-vect v1))
        (v1_y (ycor-vect v1))
        (v2_x (xcor-vect v2))
        (v2_y (ycor-vect v2)))
    (make-vect (- v1_x v2_x) (- v1_y v2_y))
  ))
(define (scale-vect s v)
  (let ((vx (xcor-vect v))
        (vy (ycor-vect v)))
    (make-vect (* s vx) (* s vy))
  ))

;(define (add-vect . v_s)
;  (cond ((null? v_s) nil)
;    ((null? (cdr v_s)) v_s)
;    ((null? (cddr v_s)) (add-two-vect (car v_s) (cadr v_s)))
;    (else
;      (add-vect (add-two-vect (car v_s) (cadr v_s)) (cddr v_s))
;      )))
(display (add-vect (make-vect 1 2) (make-vect 3 4)))
(newline)
(display (sub-vect (make-vect 1 2) (make-vect 3 4)))
(newline)
(display (scale-vect 2 (make-vect 3 4)))
(newline)
;(display (add-vect '(1 2) '(3 4) '(5 6)))
