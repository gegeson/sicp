#lang racket
(require racket/trace)
(require sicp)
; 21:17->21:24

; 18:52->19:03
; 19:08->19:39
(define (make-mobile left right)
  (list left right))
(define (make-branch length structure)
  (list length structure))

(define (left-branch branch) (car (cadr branch)))
(define (right-branch branch) (car (cdr (cadr branch))))
(define (branch-length branch) (car branch))
(define (branch-structure branch) (cadr branch))
; aのテスト
;(define m (make-mobile 2 3))
;(define b (make-branch 5 2))
;(display (left-branch b))
;(newline)
;(display (right-branch b))
;(newline)
;(display (branch-length b))
;(newline)
;(display (branch-structure b))
;(newline)
(define (total-weight branch)
  (if (not (pair? (branch-structure branch)))
    (branch-structure branch)
    (let ((left (left-branch branch))
          (right (right-branch branch)))
      (let ((leftlen (branch-length left))
            (rightlen (branch-length right))
            (leftst (branch-structure left))
            (rightst (branch-structure right)))
        (cond
          ((and (not (pair? leftst)) (not (pair? rightst)))
           (+ leftst rightst))
          ((not (pair? leftst)) (+ leftst (total-weight right)))
          ((not (pair? rightst)) (+ (total-weight left) rightst))
          (else
           (+ (total-weight left) (total-weight right))
           )
          )
        )
      ))
  )
; bのテスト
(define m1 (make-branch 4 4))
(define m2 (make-branch 2 2))
(define m12 (make-mobile m1 m2))
(define b12 (make-branch 3 m12))
(display (total-weight b12))
(newline)
(define b5 (make-branch 10 5))
(define b4 (make-branch 10 4))
(define b3 (make-branch 10 3))
(define m54 (make-mobile b5 b4))
(define b54 (make-branch 10 m54))
(define m543 (make-mobile b54 b3))
(define b543 (make-branch 10 m543))
(display b543)
(newline)
(display (total-weight b543))
(newline)
(display (total-weight b5))
(newline)
; 19:46->20:11
; 20:17->20:42
(define (calc-torque branch)
  (if (not (pair? (branch-structure branch)))
    0
    (let ((left (left-branch branch))
          (right (right-branch branch)))
      (let ((leftlen (branch-length left))
            (rightlen (branch-length right))
            (leftst (branch-structure left))
            (rightst (branch-structure right)))
        (cond
          ((and (not (pair? leftst)) (not (pair? rightst)))
           (- (* leftlen leftst) (* rightlen rightst)))
          ((not (pair? leftst)) (- (* leftlen leftst) (* rightlen (total-weight right))))
          ((not (pair? rightst)) (- (* leftlen (total-weight left)) (* rightlen rightst)))
          (else
           (- (* leftlen (total-weight left)) (* rightlen (total-weight right)))
           )
          )
        )
      ))
  )
(define (is_balanced branch)
  (if (not (pair? (branch-structure branch)))
    true
    (let ((left (left-branch branch))
          (right (right-branch branch)))
      (and (= 0 (calc-torque branch)) (is_balanced left) (is_balanced right))
      )))
(display (calc-torque b12))
(newline)
(display (calc-torque b543))
(newline)
(display (is_balanced b12))
(newline)
(display (is_balanced b543))
(newline)
;(display (calc-torque (4 4)))
;(newline)
;(display (calc-torque (2 2)))
;(newline)
;(define br4 (make-branch 2 5))
;(define br2 (make-branch 5 2))
;(define mb24 (make-mobile br4 br2))
;(define br3 (make-branch 4 mb24))
;
;(define br2_ (make-branch 5 2))
;(define br5 (make-branch 2 5))
;(define mb25 (make-mobile br2_ br5))
;(define br6 (make-branch 4 mb25))
;
;(define br (make-branch 10 (make-mobile br3 br6)))

(define br3 (make-branch 1 3))
(define br1 (make-branch 3 1))
(define mb-l (make-mobile br1 br3))
(define br-l (make-branch 6 mb-l))
(define br4 (make-branch 2 4))
(define br2 (make-branch 4 2))
(define mb-r (make-mobile br4 br2))
(define br-r (make-branch 4 mb-r))
(define br_2 (make-branch 10 (make-mobile br-l br-r)))
(display (is_balanced br_2))
; => #t
(define brn7 (make-branch 2 7))
(define brn2 (make-branch 7 2))
(define mb-ll (make-mobile brn7 brn2))
(define br-ll (make-branch 10 mb-ll))
(define br_r (make-branch 9 (make-mobile br-l br-r)))
(define br_3 (make-branch 10 (make-mobile br-ll br_r)))
(newline)
(display (is_balanced br_3))
; => #t
