n#lang racket
(require racket/trace)
(require sicp)
; 18:23->
(define (scale-list items factor)
  (if (null? items)
    nil
    (cons (* (car items) factor)
          (scale-list (cdr items) factor))))
(define (map proc items)
  (if (null? items)
    nil
    (cons (proc (car items))
          (map proc (cdr items))))
  )
(define (scale-list2 items factor)
  (map (lambda (x) (* x factor)) items)
  )
(display (scale-list (list 1 2 3) 10))
(newline)
(display (scale-list2 (list 1 2 3) 10))
(newline)
(define (square x) (* x x))
(define (square-list list)
  (if (null? list)
    nil
    (cons (square (car list)) (square-list (cdr list))))
  )
(display (square-list (list 1 2 3 4)))
(newline)
(define (square-list2 list)
  (map square list))
(display (square-list2 (list 1 2 3 4)))
(newline)
