#lang racket
(require sicp)
;16:55->17:43
(define (make-vect x y) (cons x y))
(define (xcor-vect v) (car v))
(define (ycor-vect v) (cadr v))

(define (add-vect v1 v2)
  (let ((v1_x (xcor-vect v1))
        (v1_y (ycor-vect v1))
        (v2_x (xcor-vect v2))
        (v2_y (ycor-vect v2)))
      (make-vect (+ v1_x v2_x) (+ v1_y v2_y))
    )
  )
(define (sub-vect v1 v2)
  (let ((v1_x (xcor-vect v1))
        (v1_y (ycor-vect v1))
        (v2_x (xcor-vect v2))
        (v2_y (ycor-vect v2)))
    (make-vect (- v1_x v2_x) (- v1_y v2_y))
  ))
(define (scale-vect s v)
  (let ((vx (xcor-vect v))
        (vy (ycor-vect v)))
    (make-vect (* s vx) (* s vy))
  ))
(define (make-frame origin edge1 edge2)
  (list origin edge1 edge2))
(define (origin-frame frame) (car frame))
(define (edge1-frame frame) (cadr frame))
(define (edge2-frame frame) (caddr frame))

(define (make-frame2 origin edge1 edge2)
  (cons origin (cons edge1 edge2)))

(define (origin-frame2 frame) (car frame))
(define (edge1-frame2 frame) (cadr frame))
(define (edge2-frame2 frame) (cddr frame))

(define f1 (make-frame 1 2 3))
(display (origin-frame f1))
(newline)
(display (edge1-frame f1))
(newline)
(display (edge2-frame f1))
(newline)
(define f2 (make-frame2 1 2 3))
(display f2)
(newline)
(display (origin-frame2 f2))
(newline)
(display (edge1-frame2 f2))
(newline)
(display (edge2-frame2 f2))
(newline)
