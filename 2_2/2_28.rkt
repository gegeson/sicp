#lang racket
(require racket/trace)
(require sicp)
;19:49->20:02
;20:24->21:00
(define (fringe x)
  (define (fringe-iter x result)
    (cond
      ((null? x) result)
      ((not (pair? x)) (cons x nil))
      (else
        (fringe-iter (cdr x) (append result (fringe (car x))))
      )
    ))
  ;(trace fringe-iter)
    (fringe-iter x nil)
)

(define (fringe2 x)
  (cond
    ((null? x) nil)
    ((not (pair? x)) (cons x nil))
    (else
      (append (fringe2 (car x)) (fringe2 (cdr x)))
      )
    )
  )

(define x (list (list 1 2) (list 3 4)))
(display (fringe '(1 2 (3 4))))
(newline)
(display (fringe x))
(newline)
(display (fringe (list x x)))
(newline)
(display (fringe '(((1 (2)) (((3 4))) (((5 6))) ((7 ((8) 9)))))))
(newline)
(display (fringe2 '(1 2 (3 4))))
(newline)
(display (fringe2 x))
(newline)
(display (fringe (list (list x x) (list x x))))
;(fringe-iter '(1 2 (3 4)) nil)
;(fringe-iter (2 (3 4)) (append nil (fringe 1)))
;  (fringe 1)
;    (fringe-iter 1 nil)
;    (1)
;(fringe-iter (2 (3 4)) (1))
;(fringe-iter ((3 4)) (append (1) (fringe 2)))
;  (fringe 2)
;    (fringe-iter 2 nil)
;    (2)
;(fringe-iter ((3 4)) (1 2))
;(fringe-iter nil (append (1 2) (fringe (3 4))))
;  (fringe (3 4))
;    (fringe-iter (3 4) nil)
;    (fringe-iter (4) (append nil (fringe 3)))
;      (fringe 3)
;        (fringe-iter 3 nil)
;        (3)
;    (fringe-iter (4) (3))
;      (fringe-iter nil (append (3) (fringe 4)))
;        (fringe 4)
;          (fringe-iter 4 nil)
;        (4)
;      (fringe-iter nil (append (3) (4)))
;      (fringe-iter nil (3 4))
;    (3 4)
;(fringe-iter nil (append (1 2) (3 4)))
;(fringe-iter nil (1 2 3 4))
;(1 2 3 4)
