うろ覚え自己解釈

3章冒頭
実際のプログラムでは現実にある何かしらの対象をモデル化することでプログラムを作ることが多い。
その上で、変化する内部状態を持つオブジェクトを扱う事になる。
変化する内部状態のために破壊的代入を使う必要がある。

3.1
破壊的代入は可変なデータを扱えるというメリットが有る一方で、これまでのようなシンプルな動作モデルが使えなくなるというデメリットも存在する。

3.2
破壊的代入に基づいた動作モデルを表現するのには環境モデルという変数の関係を示したモデルを導入する必要がある

3.3
内部状態を持つオブジェクトを組み合わせる上で必要な技法になるモジュール化というテクニックを幾つかの例とともに学ぶ

3.4
並列プログラミングでは破壊的代入によって非常に厄介な問題と遭遇することになる

3.5
破壊的代入を使わずに内部状態を扱う方法として無限ストリーム（遅延リスト）がある。
無限ストリームを使うと、内部状態を扱いながらも破壊的代入に伴う面倒から回避出来る。（つまり、状態を扱いながらも純粋関数型プログラミングが出来る）
しかし無限ストリームを持ってしても、やはり並列プログラミングを上手く扱う事は難しい。破壊的代入のときと同じ問題に遭遇することになる。
