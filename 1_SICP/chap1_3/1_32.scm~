(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b)
         ))
  )

(define (sum2 term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (+ (term a) result)))
    )
  (iter a 0)
  )

(define (product term a next b)
  (if (> a b)
      1
      (* (term a)
         (product term (next a) next b)
         ))
  )
(define (product2 term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (* (term a) result))
        )
    )
  (iter a 1)
  )

(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a) (accumulate combiner null-value term (next a) next b))
      )
  )
(define (accumulate2 combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (combiner (term a) result))
        )
    )
  (iter a null-value)
  )
(define (add1 n) (+ n 1))
(define (identity n) n)
(print (accumulate + 0 identity 0 add1 10))
(print (accumulate2 + 0 identity 0 add1 10))
(print (accumulate * 1 identity 1 add1 6))
(print (accumulate2 * 1 identity 1 add1 3))
