(define (product term a next b)
  (if (> a b)
      1
      (* (term a)
         (product term (next a) next b)
         ))
  )
(define (product2 term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (* (term a) result))
        )
    )
  (iter a 1)
  )

(define (square x) (* x x))

(define (factorial n)
  (define (inc n) (+ n 1))
  (define (identity n) n)
  (product2 identity 1 inc n)
  )

(define (even? n)
  (= (remainder n 2) 0)
  )

(define (calc_pi n)
  (define (nth-term n)
    (if (even? n)
        (/ (+ n 2) (+ n 1))
        (/ (+ n 1) (+ n 2))
        )
    )
  (define (inc n)
    (+ n 1))
  (* 4.0 (product2 nth-term 1 inc n))
   )

(print (factorial 1))
(print (factorial 2))
(print (factorial 3))
(print (factorial 5))
(print (factorial 6))

(print (calc_pi 10.0))
(print (calc_pi 100.0))
(print (calc_pi 1000.0))
