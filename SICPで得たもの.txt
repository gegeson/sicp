5章に入る前に一旦、SICPで得たものをまとめてみた。

一言で言うと、SICPは「プログラミング学」の本だと思う。
そういう言葉があるのか知らないけど、それ以外に適切な表現が思いつかない。

全体を通して
膨大な問題によって、プログラムの正しい読み方と適切な書き方が身に付いた、と思う。
あと、とんでもなく時間がかかったが、やりきったことで集中力と自信が付いた気がする。

1章
普通の再帰と反復再帰（末尾再帰）と木構造再帰の違い、及びそれぞれの広がり方、組み立て方、それぞれの時間計算量と空間計算量の違い・見積もり方
「手続きの抽象化」の意味と方法（DRY原則の一つの形なのかな、と思う）
高階関数の基礎
簡単なプログラムの実行モデルの脳内構築
数式や数学的手法をコードに落とし込む方法

2章
データの抽象化（生データは晒さずに抽象的で理解しやすいインターフェイスだけを晒す。多分オブジェクト指向における基礎に繋がる事）
リストと木の再帰
リストにおける高階関数（データを次々に処理する、いわゆるデータフロー）
データと手続きがある構造（要はクラス）において、データ・手続きが新たに追加されていく場合の
データ主導・メッセージパッシング・明確な振り分け、
という3つの異なる手法の存在、及びそれぞれのメリット・デメリット

3章
破壊的代入によりどのように表現力が変化するか、
及び、よく言われる「破壊的代入がプログラムの動作を予想しづらくする」という言葉の意味
（計算順序によって結果が変化するコード、並列処理、メモ化したストリームにおける挙動で学び、実感としてはっきり理解できた）
破壊的代入を導入した場合におけるプログラムの動作モデルとその複雑さ（上のと繋がる。動作モデルが複雑だからこそ挙動が複雑と言えるので）
可変データによる可変な状態を持つ対象のモデル化
モジュール化の基礎
並列プログラミングの概要とその難しさ
無限ストリーム（遅延リスト）という新たなパラダイムと、その圧倒的な表現力、そして無限ストリームを駆使しても尚並列プログラミングは難しいということ
（個人的にSICPで最も感動したのは無限ストリーム。非常に簡単に実装できて概念自体もシンプルなのに、驚くほど表現力が高まるという感動）

4章全体
インタプリタというとっておきの題材を通してこれまで見てきた様々な概念を改めて深く考え直す事が出来た。
また、インタプリタ（あるいは言語それ自体）と言えど理解可能なプログラムの一つだと理解出来た。
「すべてのプログラムはある種の評価器」という発想には至れなかったが、
2章の記号微分が最初の簡単なインタプリタの例であることに気付けた。
4章を読み終えた後に記号微分の問題を解いてみたら非常に簡単に解けるようになっていた。
4.1
インタプリタが実際にどのように実装されているかを見ることによって、
プログラムの動作モデルについて今までより深い理解を得た。
特に3章で意味不明だった環境モデルについて確かな理解が出来るようになった。
あと、4.1のメタ循環評価器についてはほぼ完全にコードの動きをトレースする事が出来て、自信につながった。
4.2
上手く言えないが、3.5とは違う実装方法による遅延評価パラダイムによって新しい視点を得た気がする
4.3
非決定性計算という新しいパラダイムにおける新たな世界のモデル化法、及びその表現力
そしてその実装を通じて複雑な機能にも理解可能な裏側がある事を知った。
継続については既にある程度Scheme手習いとScheme修行で知っているつもりだったが、
ここまで複雑な継続の使い方は知らなかったので、その点も勉強になった
4.4
殆ど飛ばしたので、上手く言えないが、
4.3同様新しいパラダイムによる異なる世界のモデル化法（捉え方）を知れた感じはある。
実装は概要しか見てないのでなんとも。
